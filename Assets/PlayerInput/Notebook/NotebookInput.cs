//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput/Notebook/NotebookInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NotebookInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NotebookInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NotebookInput"",
    ""maps"": [
        {
            ""name"": ""Notebook"",
            ""id"": ""08f245da-4af6-4672-8d4e-37ada795863e"",
            ""actions"": [
                {
                    ""name"": ""Open/Close"",
                    ""type"": ""Button"",
                    ""id"": ""c46f758d-ed97-4aa0-8ae7-9b3e95c64aa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CyclePages"",
                    ""type"": ""Value"",
                    ""id"": ""e0da5e49-b70f-433a-983b-c49319407084"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4e0e2b4-55a1-4d34-9c9f-ce7a31ef6380"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open/Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fbf4adce-e670-42ad-8f7d-8430ce478ca3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CyclePages"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6bd1e40a-2345-4773-9636-f574577877ea"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CyclePages"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0aa7119d-5230-414d-ab0f-d047bab97c75"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CyclePages"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Notebook
        m_Notebook = asset.FindActionMap("Notebook", throwIfNotFound: true);
        m_Notebook_OpenClose = m_Notebook.FindAction("Open/Close", throwIfNotFound: true);
        m_Notebook_CyclePages = m_Notebook.FindAction("CyclePages", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Notebook
    private readonly InputActionMap m_Notebook;
    private List<INotebookActions> m_NotebookActionsCallbackInterfaces = new List<INotebookActions>();
    private readonly InputAction m_Notebook_OpenClose;
    private readonly InputAction m_Notebook_CyclePages;
    public struct NotebookActions
    {
        private @NotebookInput m_Wrapper;
        public NotebookActions(@NotebookInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenClose => m_Wrapper.m_Notebook_OpenClose;
        public InputAction @CyclePages => m_Wrapper.m_Notebook_CyclePages;
        public InputActionMap Get() { return m_Wrapper.m_Notebook; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NotebookActions set) { return set.Get(); }
        public void AddCallbacks(INotebookActions instance)
        {
            if (instance == null || m_Wrapper.m_NotebookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NotebookActionsCallbackInterfaces.Add(instance);
            @OpenClose.started += instance.OnOpenClose;
            @OpenClose.performed += instance.OnOpenClose;
            @OpenClose.canceled += instance.OnOpenClose;
            @CyclePages.started += instance.OnCyclePages;
            @CyclePages.performed += instance.OnCyclePages;
            @CyclePages.canceled += instance.OnCyclePages;
        }

        private void UnregisterCallbacks(INotebookActions instance)
        {
            @OpenClose.started -= instance.OnOpenClose;
            @OpenClose.performed -= instance.OnOpenClose;
            @OpenClose.canceled -= instance.OnOpenClose;
            @CyclePages.started -= instance.OnCyclePages;
            @CyclePages.performed -= instance.OnCyclePages;
            @CyclePages.canceled -= instance.OnCyclePages;
        }

        public void RemoveCallbacks(INotebookActions instance)
        {
            if (m_Wrapper.m_NotebookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INotebookActions instance)
        {
            foreach (var item in m_Wrapper.m_NotebookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NotebookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NotebookActions @Notebook => new NotebookActions(this);
    public interface INotebookActions
    {
        void OnOpenClose(InputAction.CallbackContext context);
        void OnCyclePages(InputAction.CallbackContext context);
    }
}
