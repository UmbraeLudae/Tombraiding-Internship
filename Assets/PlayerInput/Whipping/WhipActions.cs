//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInput/Whipping/WhipActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WhipActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WhipActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WhipActions"",
    ""maps"": [
        {
            ""name"": ""Whipping"",
            ""id"": ""72e74132-d952-44c9-8673-97255708ce55"",
            ""actions"": [
                {
                    ""name"": ""Whip"",
                    ""type"": ""Button"",
                    ""id"": ""18e77ef8-69ce-4110-b5cd-8f957fefb33b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WhipTarget"",
                    ""type"": ""Value"",
                    ""id"": ""57c648af-5881-4d2a-bc59-c3abf38a3d91"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0438e07e-b9fb-4dd8-9c55-c281d08a3003"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Whip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b897230-4c96-4c88-87bf-3ca4d74b279e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WhipTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Whipping
        m_Whipping = asset.FindActionMap("Whipping", throwIfNotFound: true);
        m_Whipping_Whip = m_Whipping.FindAction("Whip", throwIfNotFound: true);
        m_Whipping_WhipTarget = m_Whipping.FindAction("WhipTarget", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Whipping
    private readonly InputActionMap m_Whipping;
    private IWhippingActions m_WhippingActionsCallbackInterface;
    private readonly InputAction m_Whipping_Whip;
    private readonly InputAction m_Whipping_WhipTarget;
    public struct WhippingActions
    {
        private @WhipActions m_Wrapper;
        public WhippingActions(@WhipActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Whip => m_Wrapper.m_Whipping_Whip;
        public InputAction @WhipTarget => m_Wrapper.m_Whipping_WhipTarget;
        public InputActionMap Get() { return m_Wrapper.m_Whipping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WhippingActions set) { return set.Get(); }
        public void SetCallbacks(IWhippingActions instance)
        {
            if (m_Wrapper.m_WhippingActionsCallbackInterface != null)
            {
                @Whip.started -= m_Wrapper.m_WhippingActionsCallbackInterface.OnWhip;
                @Whip.performed -= m_Wrapper.m_WhippingActionsCallbackInterface.OnWhip;
                @Whip.canceled -= m_Wrapper.m_WhippingActionsCallbackInterface.OnWhip;
                @WhipTarget.started -= m_Wrapper.m_WhippingActionsCallbackInterface.OnWhipTarget;
                @WhipTarget.performed -= m_Wrapper.m_WhippingActionsCallbackInterface.OnWhipTarget;
                @WhipTarget.canceled -= m_Wrapper.m_WhippingActionsCallbackInterface.OnWhipTarget;
            }
            m_Wrapper.m_WhippingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Whip.started += instance.OnWhip;
                @Whip.performed += instance.OnWhip;
                @Whip.canceled += instance.OnWhip;
                @WhipTarget.started += instance.OnWhipTarget;
                @WhipTarget.performed += instance.OnWhipTarget;
                @WhipTarget.canceled += instance.OnWhipTarget;
            }
        }
    }
    public WhippingActions @Whipping => new WhippingActions(this);
    public interface IWhippingActions
    {
        void OnWhip(InputAction.CallbackContext context);
        void OnWhipTarget(InputAction.CallbackContext context);
    }
}
